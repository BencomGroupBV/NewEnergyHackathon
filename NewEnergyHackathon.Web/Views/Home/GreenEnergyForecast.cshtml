@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-flex justify-content-center align-items-center mb-4">
    <button id="prevDay" class="btn btn-outline-secondary me-2">&#8592;</button>

    <input type="date" id="selectedDate" class="form-control text-center" style="max-width: 200px;" />

    <button id="nextDay" class="btn btn-outline-secondary ms-2">&#8594;</button>
</div>

<div class="container-fluid">
    <div class="row mb-4">
        <!-- Graph 1 -->
        <div class="col">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Daily Green Energy</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area" style="height: 100%; width:100%;">
                        <canvas id="forecastChart"></canvas>
                    </div>
                    <div class="mt-4 text-center">
                        <h5>Score: <span id="score1">Score: 50%</span></h5>
                        <p id="explanation1">This day 50% of all energy on the grid was green.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Graph 2 -->
        <div class="col">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-success">Usage</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="usageChart"></canvas>
                    </div>
                    <div class="mt-4 text-center">
                        <h5>Score: <span id="score2">Model.Score2</span></h5>
                        <p id="explanation2">Model.Explanation2</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {

    <script>
        function formatDate(date) {
          return date.toISOString().split('T')[0];
        }

        function navigateTo(date) {
          const before = formatDate(date);
          const afterDate = new Date(date);
          afterDate.setDate(afterDate.getDate() - 1);
          const after = formatDate(afterDate);
              window.location.href = `/daily-green-energy?dateTo=2025-03-23&dateFrom=2025-03-21`;
        }

        document.addEventListener("DOMContentLoaded", function () {
          const dateInput = document.getElementById('selectedDate');
          const urlParams = new URLSearchParams(window.location.search);
          const beforeParam = urlParams.get('before');

          // Set initial value to 'before' or today
          const today = new Date();
          const selected = beforeParam ? new Date(beforeParam) : today;
          dateInput.value = formatDate(selected);

          // Arrow button handlers
          document.getElementById('prevDay').addEventListener('click', function () {
            const newDate = new Date(dateInput.value);
            newDate.setDate(newDate.getDate() - 1);
            navigateTo(newDate);
          });

          document.getElementById('nextDay').addEventListener('click', function () {
            const newDate = new Date(dateInput.value);
            newDate.setDate(newDate.getDate() + 1);
            navigateTo(newDate);
          });

          // Optional: Update on manual date input
          dateInput.addEventListener('change', function () {
            navigateTo(new Date(this.value));
          });
        });
    </script>

    <script>
          function buildGraph(data) {
            // Set new default font family and font color to mimic Bootstrap's default styling
            Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
            Chart.defaults.global.defaultFontColor = '#858796';

            // Bar Chart Example
            var ctx = document.getElementById("forecastChart");
            const stackedChart = new Chart(ctx, {
              type: 'bar',
              data: {
                labels: data.map((input) => {
                  const date = new Date(input.validfrom);
                  return `${date.getHours()}:00`;
                }),
                datasets: [
                  {
                    label: 'Wind',
                    data: data.map((input) => input.Wind_Percentage),
                    backgroundColor: '#82b9ea',
                    stack: 'combined' // same stack ID
                  },
                  {
                    label: 'Solar',
                    data: data.map((input) => input.Solar_Percentage),
                    backgroundColor: '#f9c951',
                    stack: 'combined' // same stack ID
                  }
                ]
              },
              options: {
                responsive: true,
                plugins: {
                  tooltip: {
                    mode: 'index',
                    intersect: false
                  },
                  legend: {
                    position: 'bottom'
                  }
                },
                scales: {
                  xAxes: [{
                    stacked: true,               // stack bars on the x-axis
                    scaleLabel: {
                      display: true,         // ← enable the label
                      labelString: 'Time of Day',
                      fontSize: 14,
                      fontStyle: 'bold'
                    },
                  }],
                  yAxes: [{
                    stacked: true,              // stack values on the y-axis
                    scaleLabel: {
                      display: true,         // ← enable the label
                      labelString: 'Percentage',
                      fontSize: 14,
                      fontStyle: 'bold'
                    },
                    ticks: {
                      beginAtZero: true,   // start at zero
                      max: 100,            // force upper bound
                      stepSize: 10,        // tick every 10 units
                      endOnTick: true      // make sure the last tick is at max
                    }
                  }]
                }
              }
            });
          }

        document.addEventListener("DOMContentLoaded", function () {
          fetch('/daily-green-energy?dateTo=2025-03-23&dateFrom=2025-03-21')
            .then(res => res.json())
            .then(data => buildGraph(data));
        });
    </script>
}