﻿@{
  ViewData["Title"] = "Smart Meter Data";
  Layout = "_Layout";
}

<div class="container-fluid">


  <div class="col-xl-8 col-lg-7">

    <div class="d-flex justify-content-center align-items-center mb-4">
      <button id="prevDay" class="btn btn-outline-secondary me-2">&#8592;</button>

      <input type="date" id="selectedDate" class="form-control text-center" style="max-width: 200px;" value="2025-03-21" />

      <button id="nextDay" class="btn btn-outline-secondary ms-2">&#8594;</button>
    </div>
    <div class="card shadow mb-4">
      <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Verbruiksinzicht</h6>
      </div>
      <div class="card-body">
        <div class="chart-area" style="width:100%;height:100%;">
          <canvas id="userConsumptionChart"></canvas>

          <div class="row">
            <div class="col">
              <table class="table table-bordered table-striped">
                <thead class="thead-light">
                  <tr>
                    <th class="text-center">Jouw score</th>
                    <th class="text-center">Gemiddelde score van stroomnet</th>
                  </tr>
                </thead>
                <tbody>
                  <tr id="comparisonRow" style="padding-top:5px;">
                    <td class="left text-center">49.2%</td>
                    <td class="right text-center">43.2%</td>
                  </tr>
                </tbody>
              </table>


              <script>
                const row = document.getElementById('comparisonRow');
                const leftCell = row.querySelector('.left');
                const rightCell = row.querySelector('.right');

                // Strip % and convert to numbers
                const leftValue = parseFloat(leftCell.textContent.replace('%', ''));
                const rightValue = parseFloat(rightCell.textContent.replace('%', ''));

                // Apply colors based on comparison
                if (leftValue > rightValue) {
                  leftCell.style.color = 'green';
                } else {
                  leftCell.style.color = 'red';
                }
              </script>

              @*    <tr>
                    <td>Yesterday</td>
                    <td>40%</td>
                    <td>45%</td>
                  </tr> *@

              </tbody>
              </table>
            </div>
          </div>
          <a href="/Home/GreenEnergyForecast">
            <div id="netmixFeedback" class="mt-3 p-3 bg-success text-white rounded shadow-sm">
              Wil je dit vasthouden? Check hier wanneer je het beste je apparaten kunt gebruiken.
            </div>
          </a>
        </div>
      </div>
    </div>

  </div>
</div>

</div>

<script>
  // Feedback options for users outperforming the netmix
  const outperformOptions = [
    "💡 <strong>Je zit goed!</strong><br>Afgelopen week was gemiddeld 62% van de stroom op het net groen. Jouw verbruik bestond zelfs voor 74% uit duurzame energie. Door je apparaten op de juiste momenten te gebruiken, draag je al flink bij aan de energietransitie.<br>➡️ Bekijk wanneer de stroom vandaag en morgen het groenst is, en blijf slim plannen.",
    "🌿 <strong>Mooi gedaan!</strong><br>Jij hebt 14% méér groene energie gebruikt dan het landelijke gemiddelde. Dat betekent minder CO₂-uitstoot en een slimme inzet van duurzame bronnen.<br>➡️ Wil je dit vasthouden? Check hier wanneer je het beste je apparaten kunt gebruiken.",
    "✅ <strong>Je maakt echt verschil.</strong><br>Waar het landelijk gemiddelde op 58% lag, zat jij deze week op 70% groen verbruik. Door kleine aanpassingen in je routines draag je al bij aan een schoner net.<br>➡️ Tip: bekijk hier het verwachte groene energiemoment van vandaag en morgen om verder te optimaliseren."
  ];

  // Feedback options for users underperforming the netmix
  const underperformOptions = [
    "⚠️ <strong>Je zit er nét onder.</strong><br>Gemiddeld was 64% van de stroom op het net duurzaam, terwijl jouw verbruik op 52% groen lag. Een kleine verschuiving in timing maakt al verschil.<br>➡️ Ontdek hier wanneer vandaag en morgen de stroom het duurzaamst is en plan je verbruik slimmer.",
    "🔧 <strong>Een goed moment om te verbeteren.</strong><br>Je hebt deze week 9% minder duurzame stroom verbruikt dan gemiddeld. Door bijvoorbeeld de wasmachine overdag te laten draaien of het opladen te verschuiven, kun je eenvoudig bijtrekken.<br>➡️ Bekijk hier de groene uren van vandaag en morgen voor slimme keuzes.",
    "📉 <strong>Je laat kansen liggen.</strong><br>Landelijk lag het aandeel groene stroom op 60%. Jij zat daar met 44% flink onder. Grote kans dat je veel verbruikt op minder duurzame momenten.<br>➡️ Plan bewuster: check hier de voorspelde energiemix en kies het groenste moment voor vandaag en morgen."
  ];

  // Simulate user's green score compared to average (you can replace this with actual dynamic data)
  const userOutperforms = true; // or false depending on logic

  function displayNetmixFeedback() {
    const feedbackArray = userOutperforms ? outperformOptions : underperformOptions;
    const randomIndex = Math.floor(Math.random() * feedbackArray.length);
    document.getElementById('netmixFeedback').innerHTML = feedbackArray[randomIndex];
  }

  // Show on page load
  window.onload = displayNetmixFeedback;
</script>



<script>
     // fetch('/smartmeterdata-no-solar-pannels')
    fetch('/daily-green-consumption?dateTo=2025-03-23&dateFrom=2025-03-21')
    .then(response => response.json())
    .then(wrapper => {
      console.log(wrapper);
      const dataset = wrapper.data;

      const labels = dataset.map((item) => {
        const asDate = new Date(item.items_Timestamp_UTC);

        return `${String(asDate.getUTCHours()).padStart(2, '0')}:${String(asDate.getUTCMinutes()).padStart(2, '0')}`;
      });
      const greenData = dataset.map(entry => entry.consumptionDeliveryTotal_Green / 1000);
      const nonGreenData = dataset.map(entry => entry.consumptionDeliveryTotal_NoGreen / 1000);

      const ctx = document.getElementById('userConsumptionChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Groen',
              data: greenData,
              backgroundColor: 'rgba(0, 255, 0, 0.5)',
              borderColor: 'rgba(0, 255, 0, 0.5)',
              borderWidth: 1
            },
            {
              label: 'Niet groen',
              data: nonGreenData,
              backgroundColor: 'rgba(99, 102, 106, 0.5)',
              borderColor: 'rgba(99, 102, 106, 0.5)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Tijdstip',
                fontSize: 14,
                fontStyle: 'bold'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Verbruik (kWh)',
                fontSize: 14,
                fontStyle: 'bold'
              },
            }]
          },
          tooltips: {
            mode: 'index',
            intersect: false,
            callbacks: {
              label: function(tooltipItem, data) {
                const dataset = data.datasets[tooltipItem.datasetIndex];
                const value = dataset.data[tooltipItem.index];

                return `${dataset.label}: ${Math.round(value * 1000)} Wh`;
              }
            }
          },
          plugins: {
            legend: {
              position: 'top'
            }
          }
        }
      });
    })
    .catch(error => console.error('Error loading chart data:', error));
</script>
